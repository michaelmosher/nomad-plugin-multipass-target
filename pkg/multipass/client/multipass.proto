// Copyright (C) Canonical, Ltd.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 3 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

syntax = "proto3";

option go_package = "github.com/michaelmosher/nomad-plugin-multipass-target/pkg/multipass/client";

package multipass;

import "google/protobuf/timestamp.proto";

service Rpc {
    rpc launch (stream LaunchRequest) returns (stream LaunchReply);
    rpc list (stream ListRequest) returns (stream ListReply);
    rpc networks (stream NetworksRequest) returns (stream NetworksReply);
    rpc start (stream StartRequest) returns (stream StartReply);
    rpc delet (stream DeleteRequest) returns (stream DeleteReply);
    rpc version (stream VersionRequest) returns (stream VersionReply);
    rpc authenticate (stream AuthenticateRequest) returns (stream AuthenticateReply);
}

message LaunchRequest {
    string instance_name = 1;
    string image = 2;
    string kernel_name = 3;
    int32 num_cores = 4;
    string mem_size = 5; // units?
    string disk_space = 6; // units?
    string time_zone = 7;
    string cloud_init_user_data = 8;
    string remote_name = 9;
    int32 verbosity_level = 11;

    message NetworkOptions {
        enum Mode {
            AUTO = 0;
            MANUAL = 1;
        }

        string id = 1;
        Mode mode = 2;
        string mac_address = 3;
    }
    repeated NetworkOptions network_options = 12;
    bool permission_to_bridge = 13;
    int32 timeout = 14;
    string password = 15;
}

message LaunchError {
    enum ErrorCodes {
        OK = 0;
        INVALID_MEM_SIZE = 1;
        INVALID_DISK_SIZE = 2;
        INVALID_HOSTNAME = 3;
        INVALID_NETWORK = 4;
    }
    repeated ErrorCodes error_codes = 1;
}

message LaunchProgress {
    enum ProgressTypes {
        IMAGE = 0;
        EXTRACT = 1;
        VERIFY = 2;
        WAITING = 3;
    }
    ProgressTypes type = 1;
    string percent_complete = 2;
}

message UpdateInfo {
    string version = 1;
    string url = 2;
    string title = 3;
    string description = 4;
}

message LaunchReply {
    message Alias {
        string name = 1;
        string instance = 2;
        string command = 3;
        string working_directory = 4;
    }
    oneof create_oneof {
        string vm_instance_name = 1;
        LaunchProgress launch_progress = 2;
        string create_message = 3;
    }
    string log_line = 6;
    UpdateInfo update_info = 7;
    string reply_message = 8;
    repeated string nets_need_bridging = 9;
    repeated Alias aliases_to_be_created = 10;
    repeated string workspaces_to_be_created = 11;
    bool password_requested = 12;
}

message InstanceSnapshotPair {
    string instance_name = 1;
    optional string snapshot_name = 2; // if this is present, the msg specifies a snapshot; otherwise, an instance
}

message InstanceStatus {
    enum Status {
        UNKNOWN = 0;
        RUNNING = 1;
        STARTING = 2;
        RESTARTING = 3;
        STOPPED = 4;
        DELETED = 5;
        DELAYED_SHUTDOWN = 6;
        SUSPENDING = 7;
        SUSPENDED = 8;
    }
    Status status = 1;
}

message SnapshotFundamentals {
    string snapshot_name = 1;
    string parent = 2;
    string comment = 3;
    google.protobuf.Timestamp creation_timestamp = 4;
}

message ListRequest {
    int32 verbosity_level = 1;
    bool snapshots = 2;
    bool request_ipv4 = 3;
}

message ListVMInstance {
    string name = 1;
    InstanceStatus instance_status = 2;
    repeated string ipv4 = 3;
    repeated string ipv6 = 4;
    string current_release = 5;
}

message ListVMSnapshot {
    string name = 1;
    SnapshotFundamentals fundamentals = 2;
}

message InstancesList {
    repeated ListVMInstance instances = 1;
}

message SnapshotsList {
    repeated ListVMSnapshot snapshots = 1;
}

message ListReply {
    oneof list_contents
    {
        InstancesList instance_list = 1;
        SnapshotsList snapshot_list = 2;
    }

    string log_line = 3;
    UpdateInfo update_info = 4;
}

message NetworksRequest {
    int32 verbosity_level = 1;
}

message NetInterface {
    string name = 1;
    string type = 2;
    string description = 3;
}

message NetworksReply {
    repeated NetInterface interfaces = 1;
    string log_line = 2;
    UpdateInfo update_info = 3;
}

message InstanceNames {
    repeated string instance_name = 1;
}

message StartError {
    enum ErrorCode {
        OK = 0;
        DOES_NOT_EXIST = 1;
        INSTANCE_DELETED = 2;
        OTHER = 3;
    }
    map<string, ErrorCode> instance_errors = 1;
}

message StartRequest {
    InstanceNames instance_names = 1;
    int32 verbosity_level = 2;
    int32 timeout = 3;
    string password = 4;
}

message StartReply {
    string log_line = 1;
    string reply_message = 2;
    UpdateInfo update_info = 3;
    bool password_requested = 4;
}

message DeleteRequest {
    repeated InstanceSnapshotPair instance_snapshot_pairs = 1;
    bool purge = 2;
    int32 verbosity_level = 3;
    bool purge_snapshots = 4;
}

message DeleteReply {
    string log_line = 1;
    repeated string purged_instances = 2;
    bool confirm_snapshot_purging = 3;
}

message VersionRequest {
    int32 verbosity_level = 1;
}

message VersionReply {
    string version = 1;
    string log_line = 2;
    UpdateInfo update_info = 3;
}

message AuthenticateRequest {
    string passphrase = 1;
    int32 verbosity_level = 2;
}

message AuthenticateReply {
    string log_line = 1;
}
