// Copyright (C) Canonical, Ltd.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 3 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: multipass.proto

package client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LaunchRequest_NetworkOptions_Mode int32

const (
	LaunchRequest_NetworkOptions_AUTO   LaunchRequest_NetworkOptions_Mode = 0
	LaunchRequest_NetworkOptions_MANUAL LaunchRequest_NetworkOptions_Mode = 1
)

// Enum value maps for LaunchRequest_NetworkOptions_Mode.
var (
	LaunchRequest_NetworkOptions_Mode_name = map[int32]string{
		0: "AUTO",
		1: "MANUAL",
	}
	LaunchRequest_NetworkOptions_Mode_value = map[string]int32{
		"AUTO":   0,
		"MANUAL": 1,
	}
)

func (x LaunchRequest_NetworkOptions_Mode) Enum() *LaunchRequest_NetworkOptions_Mode {
	p := new(LaunchRequest_NetworkOptions_Mode)
	*p = x
	return p
}

func (x LaunchRequest_NetworkOptions_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchRequest_NetworkOptions_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_proto_enumTypes[0].Descriptor()
}

func (LaunchRequest_NetworkOptions_Mode) Type() protoreflect.EnumType {
	return &file_multipass_proto_enumTypes[0]
}

func (x LaunchRequest_NetworkOptions_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchRequest_NetworkOptions_Mode.Descriptor instead.
func (LaunchRequest_NetworkOptions_Mode) EnumDescriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{0, 0, 0}
}

type LaunchError_ErrorCodes int32

const (
	LaunchError_OK                LaunchError_ErrorCodes = 0
	LaunchError_INVALID_MEM_SIZE  LaunchError_ErrorCodes = 1
	LaunchError_INVALID_DISK_SIZE LaunchError_ErrorCodes = 2
	LaunchError_INVALID_HOSTNAME  LaunchError_ErrorCodes = 3
	LaunchError_INVALID_NETWORK   LaunchError_ErrorCodes = 4
)

// Enum value maps for LaunchError_ErrorCodes.
var (
	LaunchError_ErrorCodes_name = map[int32]string{
		0: "OK",
		1: "INVALID_MEM_SIZE",
		2: "INVALID_DISK_SIZE",
		3: "INVALID_HOSTNAME",
		4: "INVALID_NETWORK",
	}
	LaunchError_ErrorCodes_value = map[string]int32{
		"OK":                0,
		"INVALID_MEM_SIZE":  1,
		"INVALID_DISK_SIZE": 2,
		"INVALID_HOSTNAME":  3,
		"INVALID_NETWORK":   4,
	}
)

func (x LaunchError_ErrorCodes) Enum() *LaunchError_ErrorCodes {
	p := new(LaunchError_ErrorCodes)
	*p = x
	return p
}

func (x LaunchError_ErrorCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchError_ErrorCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_proto_enumTypes[1].Descriptor()
}

func (LaunchError_ErrorCodes) Type() protoreflect.EnumType {
	return &file_multipass_proto_enumTypes[1]
}

func (x LaunchError_ErrorCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchError_ErrorCodes.Descriptor instead.
func (LaunchError_ErrorCodes) EnumDescriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{1, 0}
}

type LaunchProgress_ProgressTypes int32

const (
	LaunchProgress_IMAGE   LaunchProgress_ProgressTypes = 0
	LaunchProgress_EXTRACT LaunchProgress_ProgressTypes = 1
	LaunchProgress_VERIFY  LaunchProgress_ProgressTypes = 2
	LaunchProgress_WAITING LaunchProgress_ProgressTypes = 3
)

// Enum value maps for LaunchProgress_ProgressTypes.
var (
	LaunchProgress_ProgressTypes_name = map[int32]string{
		0: "IMAGE",
		1: "EXTRACT",
		2: "VERIFY",
		3: "WAITING",
	}
	LaunchProgress_ProgressTypes_value = map[string]int32{
		"IMAGE":   0,
		"EXTRACT": 1,
		"VERIFY":  2,
		"WAITING": 3,
	}
)

func (x LaunchProgress_ProgressTypes) Enum() *LaunchProgress_ProgressTypes {
	p := new(LaunchProgress_ProgressTypes)
	*p = x
	return p
}

func (x LaunchProgress_ProgressTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchProgress_ProgressTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_proto_enumTypes[2].Descriptor()
}

func (LaunchProgress_ProgressTypes) Type() protoreflect.EnumType {
	return &file_multipass_proto_enumTypes[2]
}

func (x LaunchProgress_ProgressTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchProgress_ProgressTypes.Descriptor instead.
func (LaunchProgress_ProgressTypes) EnumDescriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{2, 0}
}

type InstanceStatus_Status int32

const (
	InstanceStatus_UNKNOWN          InstanceStatus_Status = 0
	InstanceStatus_RUNNING          InstanceStatus_Status = 1
	InstanceStatus_STARTING         InstanceStatus_Status = 2
	InstanceStatus_RESTARTING       InstanceStatus_Status = 3
	InstanceStatus_STOPPED          InstanceStatus_Status = 4
	InstanceStatus_DELETED          InstanceStatus_Status = 5
	InstanceStatus_DELAYED_SHUTDOWN InstanceStatus_Status = 6
	InstanceStatus_SUSPENDING       InstanceStatus_Status = 7
	InstanceStatus_SUSPENDED        InstanceStatus_Status = 8
)

// Enum value maps for InstanceStatus_Status.
var (
	InstanceStatus_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "RUNNING",
		2: "STARTING",
		3: "RESTARTING",
		4: "STOPPED",
		5: "DELETED",
		6: "DELAYED_SHUTDOWN",
		7: "SUSPENDING",
		8: "SUSPENDED",
	}
	InstanceStatus_Status_value = map[string]int32{
		"UNKNOWN":          0,
		"RUNNING":          1,
		"STARTING":         2,
		"RESTARTING":       3,
		"STOPPED":          4,
		"DELETED":          5,
		"DELAYED_SHUTDOWN": 6,
		"SUSPENDING":       7,
		"SUSPENDED":        8,
	}
)

func (x InstanceStatus_Status) Enum() *InstanceStatus_Status {
	p := new(InstanceStatus_Status)
	*p = x
	return p
}

func (x InstanceStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_proto_enumTypes[3].Descriptor()
}

func (InstanceStatus_Status) Type() protoreflect.EnumType {
	return &file_multipass_proto_enumTypes[3]
}

func (x InstanceStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceStatus_Status.Descriptor instead.
func (InstanceStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{6, 0}
}

type StartError_ErrorCode int32

const (
	StartError_OK               StartError_ErrorCode = 0
	StartError_DOES_NOT_EXIST   StartError_ErrorCode = 1
	StartError_INSTANCE_DELETED StartError_ErrorCode = 2
	StartError_OTHER            StartError_ErrorCode = 3
)

// Enum value maps for StartError_ErrorCode.
var (
	StartError_ErrorCode_name = map[int32]string{
		0: "OK",
		1: "DOES_NOT_EXIST",
		2: "INSTANCE_DELETED",
		3: "OTHER",
	}
	StartError_ErrorCode_value = map[string]int32{
		"OK":               0,
		"DOES_NOT_EXIST":   1,
		"INSTANCE_DELETED": 2,
		"OTHER":            3,
	}
)

func (x StartError_ErrorCode) Enum() *StartError_ErrorCode {
	p := new(StartError_ErrorCode)
	*p = x
	return p
}

func (x StartError_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartError_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_multipass_proto_enumTypes[4].Descriptor()
}

func (StartError_ErrorCode) Type() protoreflect.EnumType {
	return &file_multipass_proto_enumTypes[4]
}

func (x StartError_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartError_ErrorCode.Descriptor instead.
func (StartError_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{18, 0}
}

type LaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName       string                          `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Image              string                          `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	KernelName         string                          `protobuf:"bytes,3,opt,name=kernel_name,json=kernelName,proto3" json:"kernel_name,omitempty"`
	NumCores           int32                           `protobuf:"varint,4,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty"`
	MemSize            string                          `protobuf:"bytes,5,opt,name=mem_size,json=memSize,proto3" json:"mem_size,omitempty"`       // units?
	DiskSpace          string                          `protobuf:"bytes,6,opt,name=disk_space,json=diskSpace,proto3" json:"disk_space,omitempty"` // units?
	TimeZone           string                          `protobuf:"bytes,7,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	CloudInitUserData  string                          `protobuf:"bytes,8,opt,name=cloud_init_user_data,json=cloudInitUserData,proto3" json:"cloud_init_user_data,omitempty"`
	RemoteName         string                          `protobuf:"bytes,9,opt,name=remote_name,json=remoteName,proto3" json:"remote_name,omitempty"`
	VerbosityLevel     int32                           `protobuf:"varint,11,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	NetworkOptions     []*LaunchRequest_NetworkOptions `protobuf:"bytes,12,rep,name=network_options,json=networkOptions,proto3" json:"network_options,omitempty"`
	PermissionToBridge bool                            `protobuf:"varint,13,opt,name=permission_to_bridge,json=permissionToBridge,proto3" json:"permission_to_bridge,omitempty"`
	Timeout            int32                           `protobuf:"varint,14,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Password           string                          `protobuf:"bytes,15,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LaunchRequest) Reset() {
	*x = LaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchRequest) ProtoMessage() {}

func (x *LaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchRequest.ProtoReflect.Descriptor instead.
func (*LaunchRequest) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{0}
}

func (x *LaunchRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *LaunchRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *LaunchRequest) GetKernelName() string {
	if x != nil {
		return x.KernelName
	}
	return ""
}

func (x *LaunchRequest) GetNumCores() int32 {
	if x != nil {
		return x.NumCores
	}
	return 0
}

func (x *LaunchRequest) GetMemSize() string {
	if x != nil {
		return x.MemSize
	}
	return ""
}

func (x *LaunchRequest) GetDiskSpace() string {
	if x != nil {
		return x.DiskSpace
	}
	return ""
}

func (x *LaunchRequest) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *LaunchRequest) GetCloudInitUserData() string {
	if x != nil {
		return x.CloudInitUserData
	}
	return ""
}

func (x *LaunchRequest) GetRemoteName() string {
	if x != nil {
		return x.RemoteName
	}
	return ""
}

func (x *LaunchRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *LaunchRequest) GetNetworkOptions() []*LaunchRequest_NetworkOptions {
	if x != nil {
		return x.NetworkOptions
	}
	return nil
}

func (x *LaunchRequest) GetPermissionToBridge() bool {
	if x != nil {
		return x.PermissionToBridge
	}
	return false
}

func (x *LaunchRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *LaunchRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LaunchError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCodes []LaunchError_ErrorCodes `protobuf:"varint,1,rep,packed,name=error_codes,json=errorCodes,proto3,enum=multipass.LaunchError_ErrorCodes" json:"error_codes,omitempty"`
}

func (x *LaunchError) Reset() {
	*x = LaunchError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchError) ProtoMessage() {}

func (x *LaunchError) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchError.ProtoReflect.Descriptor instead.
func (*LaunchError) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{1}
}

func (x *LaunchError) GetErrorCodes() []LaunchError_ErrorCodes {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

type LaunchProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            LaunchProgress_ProgressTypes `protobuf:"varint,1,opt,name=type,proto3,enum=multipass.LaunchProgress_ProgressTypes" json:"type,omitempty"`
	PercentComplete string                       `protobuf:"bytes,2,opt,name=percent_complete,json=percentComplete,proto3" json:"percent_complete,omitempty"`
}

func (x *LaunchProgress) Reset() {
	*x = LaunchProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchProgress) ProtoMessage() {}

func (x *LaunchProgress) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchProgress.ProtoReflect.Descriptor instead.
func (*LaunchProgress) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{2}
}

func (x *LaunchProgress) GetType() LaunchProgress_ProgressTypes {
	if x != nil {
		return x.Type
	}
	return LaunchProgress_IMAGE
}

func (x *LaunchProgress) GetPercentComplete() string {
	if x != nil {
		return x.PercentComplete
	}
	return ""
}

type UpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateInfo) Reset() {
	*x = UpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInfo) ProtoMessage() {}

func (x *UpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInfo.ProtoReflect.Descriptor instead.
func (*UpdateInfo) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type LaunchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CreateOneof:
	//
	//	*LaunchReply_VmInstanceName
	//	*LaunchReply_LaunchProgress
	//	*LaunchReply_CreateMessage
	CreateOneof           isLaunchReply_CreateOneof `protobuf_oneof:"create_oneof"`
	LogLine               string                    `protobuf:"bytes,6,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	UpdateInfo            *UpdateInfo               `protobuf:"bytes,7,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
	ReplyMessage          string                    `protobuf:"bytes,8,opt,name=reply_message,json=replyMessage,proto3" json:"reply_message,omitempty"`
	NetsNeedBridging      []string                  `protobuf:"bytes,9,rep,name=nets_need_bridging,json=netsNeedBridging,proto3" json:"nets_need_bridging,omitempty"`
	AliasesToBeCreated    []*LaunchReply_Alias      `protobuf:"bytes,10,rep,name=aliases_to_be_created,json=aliasesToBeCreated,proto3" json:"aliases_to_be_created,omitempty"`
	WorkspacesToBeCreated []string                  `protobuf:"bytes,11,rep,name=workspaces_to_be_created,json=workspacesToBeCreated,proto3" json:"workspaces_to_be_created,omitempty"`
	PasswordRequested     bool                      `protobuf:"varint,12,opt,name=password_requested,json=passwordRequested,proto3" json:"password_requested,omitempty"`
}

func (x *LaunchReply) Reset() {
	*x = LaunchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchReply) ProtoMessage() {}

func (x *LaunchReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchReply.ProtoReflect.Descriptor instead.
func (*LaunchReply) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{4}
}

func (m *LaunchReply) GetCreateOneof() isLaunchReply_CreateOneof {
	if m != nil {
		return m.CreateOneof
	}
	return nil
}

func (x *LaunchReply) GetVmInstanceName() string {
	if x, ok := x.GetCreateOneof().(*LaunchReply_VmInstanceName); ok {
		return x.VmInstanceName
	}
	return ""
}

func (x *LaunchReply) GetLaunchProgress() *LaunchProgress {
	if x, ok := x.GetCreateOneof().(*LaunchReply_LaunchProgress); ok {
		return x.LaunchProgress
	}
	return nil
}

func (x *LaunchReply) GetCreateMessage() string {
	if x, ok := x.GetCreateOneof().(*LaunchReply_CreateMessage); ok {
		return x.CreateMessage
	}
	return ""
}

func (x *LaunchReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *LaunchReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

func (x *LaunchReply) GetReplyMessage() string {
	if x != nil {
		return x.ReplyMessage
	}
	return ""
}

func (x *LaunchReply) GetNetsNeedBridging() []string {
	if x != nil {
		return x.NetsNeedBridging
	}
	return nil
}

func (x *LaunchReply) GetAliasesToBeCreated() []*LaunchReply_Alias {
	if x != nil {
		return x.AliasesToBeCreated
	}
	return nil
}

func (x *LaunchReply) GetWorkspacesToBeCreated() []string {
	if x != nil {
		return x.WorkspacesToBeCreated
	}
	return nil
}

func (x *LaunchReply) GetPasswordRequested() bool {
	if x != nil {
		return x.PasswordRequested
	}
	return false
}

type isLaunchReply_CreateOneof interface {
	isLaunchReply_CreateOneof()
}

type LaunchReply_VmInstanceName struct {
	VmInstanceName string `protobuf:"bytes,1,opt,name=vm_instance_name,json=vmInstanceName,proto3,oneof"`
}

type LaunchReply_LaunchProgress struct {
	LaunchProgress *LaunchProgress `protobuf:"bytes,2,opt,name=launch_progress,json=launchProgress,proto3,oneof"`
}

type LaunchReply_CreateMessage struct {
	CreateMessage string `protobuf:"bytes,3,opt,name=create_message,json=createMessage,proto3,oneof"`
}

func (*LaunchReply_VmInstanceName) isLaunchReply_CreateOneof() {}

func (*LaunchReply_LaunchProgress) isLaunchReply_CreateOneof() {}

func (*LaunchReply_CreateMessage) isLaunchReply_CreateOneof() {}

type InstanceSnapshotPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string  `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	SnapshotName *string `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName,proto3,oneof" json:"snapshot_name,omitempty"` // if this is present, the msg specifies a snapshot; otherwise, an instance
}

func (x *InstanceSnapshotPair) Reset() {
	*x = InstanceSnapshotPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceSnapshotPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSnapshotPair) ProtoMessage() {}

func (x *InstanceSnapshotPair) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSnapshotPair.ProtoReflect.Descriptor instead.
func (*InstanceSnapshotPair) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{5}
}

func (x *InstanceSnapshotPair) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *InstanceSnapshotPair) GetSnapshotName() string {
	if x != nil && x.SnapshotName != nil {
		return *x.SnapshotName
	}
	return ""
}

type InstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status InstanceStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=multipass.InstanceStatus_Status" json:"status,omitempty"`
}

func (x *InstanceStatus) Reset() {
	*x = InstanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatus) ProtoMessage() {}

func (x *InstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatus.ProtoReflect.Descriptor instead.
func (*InstanceStatus) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{6}
}

func (x *InstanceStatus) GetStatus() InstanceStatus_Status {
	if x != nil {
		return x.Status
	}
	return InstanceStatus_UNKNOWN
}

type SnapshotFundamentals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotName      string                 `protobuf:"bytes,1,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	Parent            string                 `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Comment           string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
}

func (x *SnapshotFundamentals) Reset() {
	*x = SnapshotFundamentals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotFundamentals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotFundamentals) ProtoMessage() {}

func (x *SnapshotFundamentals) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotFundamentals.ProtoReflect.Descriptor instead.
func (*SnapshotFundamentals) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{7}
}

func (x *SnapshotFundamentals) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *SnapshotFundamentals) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *SnapshotFundamentals) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SnapshotFundamentals) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbosityLevel int32 `protobuf:"varint,1,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	Snapshots      bool  `protobuf:"varint,2,opt,name=snapshots,proto3" json:"snapshots,omitempty"`
	RequestIpv4    bool  `protobuf:"varint,3,opt,name=request_ipv4,json=requestIpv4,proto3" json:"request_ipv4,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{8}
}

func (x *ListRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *ListRequest) GetSnapshots() bool {
	if x != nil {
		return x.Snapshots
	}
	return false
}

func (x *ListRequest) GetRequestIpv4() bool {
	if x != nil {
		return x.RequestIpv4
	}
	return false
}

type ListVMInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InstanceStatus *InstanceStatus `protobuf:"bytes,2,opt,name=instance_status,json=instanceStatus,proto3" json:"instance_status,omitempty"`
	Ipv4           []string        `protobuf:"bytes,3,rep,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6           []string        `protobuf:"bytes,4,rep,name=ipv6,proto3" json:"ipv6,omitempty"`
	CurrentRelease string          `protobuf:"bytes,5,opt,name=current_release,json=currentRelease,proto3" json:"current_release,omitempty"`
}

func (x *ListVMInstance) Reset() {
	*x = ListVMInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMInstance) ProtoMessage() {}

func (x *ListVMInstance) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMInstance.ProtoReflect.Descriptor instead.
func (*ListVMInstance) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{9}
}

func (x *ListVMInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListVMInstance) GetInstanceStatus() *InstanceStatus {
	if x != nil {
		return x.InstanceStatus
	}
	return nil
}

func (x *ListVMInstance) GetIpv4() []string {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *ListVMInstance) GetIpv6() []string {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *ListVMInstance) GetCurrentRelease() string {
	if x != nil {
		return x.CurrentRelease
	}
	return ""
}

type ListVMSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fundamentals *SnapshotFundamentals `protobuf:"bytes,2,opt,name=fundamentals,proto3" json:"fundamentals,omitempty"`
}

func (x *ListVMSnapshot) Reset() {
	*x = ListVMSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMSnapshot) ProtoMessage() {}

func (x *ListVMSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMSnapshot.ProtoReflect.Descriptor instead.
func (*ListVMSnapshot) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{10}
}

func (x *ListVMSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListVMSnapshot) GetFundamentals() *SnapshotFundamentals {
	if x != nil {
		return x.Fundamentals
	}
	return nil
}

type InstancesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*ListVMInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *InstancesList) Reset() {
	*x = InstancesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesList) ProtoMessage() {}

func (x *InstancesList) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesList.ProtoReflect.Descriptor instead.
func (*InstancesList) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{11}
}

func (x *InstancesList) GetInstances() []*ListVMInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type SnapshotsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots []*ListVMSnapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *SnapshotsList) Reset() {
	*x = SnapshotsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotsList) ProtoMessage() {}

func (x *SnapshotsList) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotsList.ProtoReflect.Descriptor instead.
func (*SnapshotsList) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{12}
}

func (x *SnapshotsList) GetSnapshots() []*ListVMSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type ListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ListContents:
	//
	//	*ListReply_InstanceList
	//	*ListReply_SnapshotList
	ListContents isListReply_ListContents `protobuf_oneof:"list_contents"`
	LogLine      string                   `protobuf:"bytes,3,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	UpdateInfo   *UpdateInfo              `protobuf:"bytes,4,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (x *ListReply) Reset() {
	*x = ListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReply) ProtoMessage() {}

func (x *ListReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReply.ProtoReflect.Descriptor instead.
func (*ListReply) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{13}
}

func (m *ListReply) GetListContents() isListReply_ListContents {
	if m != nil {
		return m.ListContents
	}
	return nil
}

func (x *ListReply) GetInstanceList() *InstancesList {
	if x, ok := x.GetListContents().(*ListReply_InstanceList); ok {
		return x.InstanceList
	}
	return nil
}

func (x *ListReply) GetSnapshotList() *SnapshotsList {
	if x, ok := x.GetListContents().(*ListReply_SnapshotList); ok {
		return x.SnapshotList
	}
	return nil
}

func (x *ListReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *ListReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

type isListReply_ListContents interface {
	isListReply_ListContents()
}

type ListReply_InstanceList struct {
	InstanceList *InstancesList `protobuf:"bytes,1,opt,name=instance_list,json=instanceList,proto3,oneof"`
}

type ListReply_SnapshotList struct {
	SnapshotList *SnapshotsList `protobuf:"bytes,2,opt,name=snapshot_list,json=snapshotList,proto3,oneof"`
}

func (*ListReply_InstanceList) isListReply_ListContents() {}

func (*ListReply_SnapshotList) isListReply_ListContents() {}

type NetworksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbosityLevel int32 `protobuf:"varint,1,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *NetworksRequest) Reset() {
	*x = NetworksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworksRequest) ProtoMessage() {}

func (x *NetworksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworksRequest.ProtoReflect.Descriptor instead.
func (*NetworksRequest) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{14}
}

func (x *NetworksRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type NetInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *NetInterface) Reset() {
	*x = NetInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterface) ProtoMessage() {}

func (x *NetInterface) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterface.ProtoReflect.Descriptor instead.
func (*NetInterface) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{15}
}

func (x *NetInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetInterface) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetInterface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type NetworksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*NetInterface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	LogLine    string          `protobuf:"bytes,2,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	UpdateInfo *UpdateInfo     `protobuf:"bytes,3,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (x *NetworksReply) Reset() {
	*x = NetworksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworksReply) ProtoMessage() {}

func (x *NetworksReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworksReply.ProtoReflect.Descriptor instead.
func (*NetworksReply) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{16}
}

func (x *NetworksReply) GetInterfaces() []*NetInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *NetworksReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *NetworksReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

type InstanceNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName []string `protobuf:"bytes,1,rep,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
}

func (x *InstanceNames) Reset() {
	*x = InstanceNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceNames) ProtoMessage() {}

func (x *InstanceNames) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceNames.ProtoReflect.Descriptor instead.
func (*InstanceNames) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{17}
}

func (x *InstanceNames) GetInstanceName() []string {
	if x != nil {
		return x.InstanceName
	}
	return nil
}

type StartError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceErrors map[string]StartError_ErrorCode `protobuf:"bytes,1,rep,name=instance_errors,json=instanceErrors,proto3" json:"instance_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=multipass.StartError_ErrorCode"`
}

func (x *StartError) Reset() {
	*x = StartError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartError) ProtoMessage() {}

func (x *StartError) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartError.ProtoReflect.Descriptor instead.
func (*StartError) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{18}
}

func (x *StartError) GetInstanceErrors() map[string]StartError_ErrorCode {
	if x != nil {
		return x.InstanceErrors
	}
	return nil
}

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceNames  *InstanceNames `protobuf:"bytes,1,opt,name=instance_names,json=instanceNames,proto3" json:"instance_names,omitempty"`
	VerbosityLevel int32          `protobuf:"varint,2,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	Timeout        int32          `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Password       string         `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{19}
}

func (x *StartRequest) GetInstanceNames() *InstanceNames {
	if x != nil {
		return x.InstanceNames
	}
	return nil
}

func (x *StartRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *StartRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *StartRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type StartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine           string      `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	ReplyMessage      string      `protobuf:"bytes,2,opt,name=reply_message,json=replyMessage,proto3" json:"reply_message,omitempty"`
	UpdateInfo        *UpdateInfo `protobuf:"bytes,3,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
	PasswordRequested bool        `protobuf:"varint,4,opt,name=password_requested,json=passwordRequested,proto3" json:"password_requested,omitempty"`
}

func (x *StartReply) Reset() {
	*x = StartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReply) ProtoMessage() {}

func (x *StartReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReply.ProtoReflect.Descriptor instead.
func (*StartReply) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{20}
}

func (x *StartReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *StartReply) GetReplyMessage() string {
	if x != nil {
		return x.ReplyMessage
	}
	return ""
}

func (x *StartReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

func (x *StartReply) GetPasswordRequested() bool {
	if x != nil {
		return x.PasswordRequested
	}
	return false
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceSnapshotPairs []*InstanceSnapshotPair `protobuf:"bytes,1,rep,name=instance_snapshot_pairs,json=instanceSnapshotPairs,proto3" json:"instance_snapshot_pairs,omitempty"`
	Purge                 bool                    `protobuf:"varint,2,opt,name=purge,proto3" json:"purge,omitempty"`
	VerbosityLevel        int32                   `protobuf:"varint,3,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
	PurgeSnapshots        bool                    `protobuf:"varint,4,opt,name=purge_snapshots,json=purgeSnapshots,proto3" json:"purge_snapshots,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteRequest) GetInstanceSnapshotPairs() []*InstanceSnapshotPair {
	if x != nil {
		return x.InstanceSnapshotPairs
	}
	return nil
}

func (x *DeleteRequest) GetPurge() bool {
	if x != nil {
		return x.Purge
	}
	return false
}

func (x *DeleteRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

func (x *DeleteRequest) GetPurgeSnapshots() bool {
	if x != nil {
		return x.PurgeSnapshots
	}
	return false
}

type DeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine                string   `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	PurgedInstances        []string `protobuf:"bytes,2,rep,name=purged_instances,json=purgedInstances,proto3" json:"purged_instances,omitempty"`
	ConfirmSnapshotPurging bool     `protobuf:"varint,3,opt,name=confirm_snapshot_purging,json=confirmSnapshotPurging,proto3" json:"confirm_snapshot_purging,omitempty"`
}

func (x *DeleteReply) Reset() {
	*x = DeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReply) ProtoMessage() {}

func (x *DeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReply.ProtoReflect.Descriptor instead.
func (*DeleteReply) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *DeleteReply) GetPurgedInstances() []string {
	if x != nil {
		return x.PurgedInstances
	}
	return nil
}

func (x *DeleteReply) GetConfirmSnapshotPurging() bool {
	if x != nil {
		return x.ConfirmSnapshotPurging
	}
	return false
}

type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerbosityLevel int32 `protobuf:"varint,1,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{23}
}

func (x *VersionRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type VersionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string      `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	LogLine    string      `protobuf:"bytes,2,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	UpdateInfo *UpdateInfo `protobuf:"bytes,3,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (x *VersionReply) Reset() {
	*x = VersionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionReply) ProtoMessage() {}

func (x *VersionReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionReply.ProtoReflect.Descriptor instead.
func (*VersionReply) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{24}
}

func (x *VersionReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *VersionReply) GetUpdateInfo() *UpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passphrase     string `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	VerbosityLevel int32  `protobuf:"varint,2,opt,name=verbosity_level,json=verbosityLevel,proto3" json:"verbosity_level,omitempty"`
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{25}
}

func (x *AuthenticateRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *AuthenticateRequest) GetVerbosityLevel() int32 {
	if x != nil {
		return x.VerbosityLevel
	}
	return 0
}

type AuthenticateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine string `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
}

func (x *AuthenticateReply) Reset() {
	*x = AuthenticateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateReply) ProtoMessage() {}

func (x *AuthenticateReply) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateReply.ProtoReflect.Descriptor instead.
func (*AuthenticateReply) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{26}
}

func (x *AuthenticateReply) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

type LaunchRequest_NetworkOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode       LaunchRequest_NetworkOptions_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=multipass.LaunchRequest_NetworkOptions_Mode" json:"mode,omitempty"`
	MacAddress string                            `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (x *LaunchRequest_NetworkOptions) Reset() {
	*x = LaunchRequest_NetworkOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchRequest_NetworkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchRequest_NetworkOptions) ProtoMessage() {}

func (x *LaunchRequest_NetworkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchRequest_NetworkOptions.ProtoReflect.Descriptor instead.
func (*LaunchRequest_NetworkOptions) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LaunchRequest_NetworkOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LaunchRequest_NetworkOptions) GetMode() LaunchRequest_NetworkOptions_Mode {
	if x != nil {
		return x.Mode
	}
	return LaunchRequest_NetworkOptions_AUTO
}

func (x *LaunchRequest_NetworkOptions) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type LaunchReply_Alias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Instance         string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Command          string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	WorkingDirectory string `protobuf:"bytes,4,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
}

func (x *LaunchReply_Alias) Reset() {
	*x = LaunchReply_Alias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multipass_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchReply_Alias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchReply_Alias) ProtoMessage() {}

func (x *LaunchReply_Alias) ProtoReflect() protoreflect.Message {
	mi := &file_multipass_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchReply_Alias.ProtoReflect.Descriptor instead.
func (*LaunchReply_Alias) Descriptor() ([]byte, []int) {
	return file_multipass_proto_rawDescGZIP(), []int{4, 0}
}

func (x *LaunchReply_Alias) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LaunchReply_Alias) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *LaunchReply_Alias) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *LaunchReply_Alias) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

var File_multipass_proto protoreflect.FileDescriptor

var file_multipass_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x05,
	0x0a, 0x0d, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x0f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0xa1, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1c, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x0a,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x4d, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x04, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x70, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x05, 0x0a, 0x0b, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x6d, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x36, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6e, 0x65, 0x74, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x73, 0x4e, 0x65,
	0x65, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x15, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x12, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x54, 0x6f, 0x42, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x1a, 0x7e, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x22, 0x77, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a,
	0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45,
	0x44, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x08, 0x22, 0xb8, 0x01, 0x0a, 0x14,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x77, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x70, 0x76, 0x34, 0x22,
	0xb9, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70,
	0x76, 0x36, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x4d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x22, 0x48, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x22, 0x48, 0x0a, 0x0d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3a,
	0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x58, 0x0a, 0x0c, 0x4e, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x34, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x62, 0x0a, 0x13, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x48, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x75, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x75, 0x72, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75,
	0x72, 0x67, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x75, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x70, 0x75,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x75, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x22, 0x39, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x7b,
	0x0a, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x13, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x2e, 0x0a, 0x11, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0xd6, 0x03, 0x0a, 0x03,
	0x52, 0x70, 0x63, 0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x44, 0x0a,
	0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x3d, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x41, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x50, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x4d, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x6d, 0x6f, 0x73, 0x68, 0x65, 0x72,
	0x2f, 0x6e, 0x6f, 0x6d, 0x61, 0x64, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x73, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_multipass_proto_rawDescOnce sync.Once
	file_multipass_proto_rawDescData = file_multipass_proto_rawDesc
)

func file_multipass_proto_rawDescGZIP() []byte {
	file_multipass_proto_rawDescOnce.Do(func() {
		file_multipass_proto_rawDescData = protoimpl.X.CompressGZIP(file_multipass_proto_rawDescData)
	})
	return file_multipass_proto_rawDescData
}

var file_multipass_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_multipass_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_multipass_proto_goTypes = []interface{}{
	(LaunchRequest_NetworkOptions_Mode)(0), // 0: multipass.LaunchRequest.NetworkOptions.Mode
	(LaunchError_ErrorCodes)(0),            // 1: multipass.LaunchError.ErrorCodes
	(LaunchProgress_ProgressTypes)(0),      // 2: multipass.LaunchProgress.ProgressTypes
	(InstanceStatus_Status)(0),             // 3: multipass.InstanceStatus.Status
	(StartError_ErrorCode)(0),              // 4: multipass.StartError.ErrorCode
	(*LaunchRequest)(nil),                  // 5: multipass.LaunchRequest
	(*LaunchError)(nil),                    // 6: multipass.LaunchError
	(*LaunchProgress)(nil),                 // 7: multipass.LaunchProgress
	(*UpdateInfo)(nil),                     // 8: multipass.UpdateInfo
	(*LaunchReply)(nil),                    // 9: multipass.LaunchReply
	(*InstanceSnapshotPair)(nil),           // 10: multipass.InstanceSnapshotPair
	(*InstanceStatus)(nil),                 // 11: multipass.InstanceStatus
	(*SnapshotFundamentals)(nil),           // 12: multipass.SnapshotFundamentals
	(*ListRequest)(nil),                    // 13: multipass.ListRequest
	(*ListVMInstance)(nil),                 // 14: multipass.ListVMInstance
	(*ListVMSnapshot)(nil),                 // 15: multipass.ListVMSnapshot
	(*InstancesList)(nil),                  // 16: multipass.InstancesList
	(*SnapshotsList)(nil),                  // 17: multipass.SnapshotsList
	(*ListReply)(nil),                      // 18: multipass.ListReply
	(*NetworksRequest)(nil),                // 19: multipass.NetworksRequest
	(*NetInterface)(nil),                   // 20: multipass.NetInterface
	(*NetworksReply)(nil),                  // 21: multipass.NetworksReply
	(*InstanceNames)(nil),                  // 22: multipass.InstanceNames
	(*StartError)(nil),                     // 23: multipass.StartError
	(*StartRequest)(nil),                   // 24: multipass.StartRequest
	(*StartReply)(nil),                     // 25: multipass.StartReply
	(*DeleteRequest)(nil),                  // 26: multipass.DeleteRequest
	(*DeleteReply)(nil),                    // 27: multipass.DeleteReply
	(*VersionRequest)(nil),                 // 28: multipass.VersionRequest
	(*VersionReply)(nil),                   // 29: multipass.VersionReply
	(*AuthenticateRequest)(nil),            // 30: multipass.AuthenticateRequest
	(*AuthenticateReply)(nil),              // 31: multipass.AuthenticateReply
	(*LaunchRequest_NetworkOptions)(nil),   // 32: multipass.LaunchRequest.NetworkOptions
	(*LaunchReply_Alias)(nil),              // 33: multipass.LaunchReply.Alias
	nil,                                    // 34: multipass.StartError.InstanceErrorsEntry
	(*timestamppb.Timestamp)(nil),          // 35: google.protobuf.Timestamp
}
var file_multipass_proto_depIdxs = []int32{
	32, // 0: multipass.LaunchRequest.network_options:type_name -> multipass.LaunchRequest.NetworkOptions
	1,  // 1: multipass.LaunchError.error_codes:type_name -> multipass.LaunchError.ErrorCodes
	2,  // 2: multipass.LaunchProgress.type:type_name -> multipass.LaunchProgress.ProgressTypes
	7,  // 3: multipass.LaunchReply.launch_progress:type_name -> multipass.LaunchProgress
	8,  // 4: multipass.LaunchReply.update_info:type_name -> multipass.UpdateInfo
	33, // 5: multipass.LaunchReply.aliases_to_be_created:type_name -> multipass.LaunchReply.Alias
	3,  // 6: multipass.InstanceStatus.status:type_name -> multipass.InstanceStatus.Status
	35, // 7: multipass.SnapshotFundamentals.creation_timestamp:type_name -> google.protobuf.Timestamp
	11, // 8: multipass.ListVMInstance.instance_status:type_name -> multipass.InstanceStatus
	12, // 9: multipass.ListVMSnapshot.fundamentals:type_name -> multipass.SnapshotFundamentals
	14, // 10: multipass.InstancesList.instances:type_name -> multipass.ListVMInstance
	15, // 11: multipass.SnapshotsList.snapshots:type_name -> multipass.ListVMSnapshot
	16, // 12: multipass.ListReply.instance_list:type_name -> multipass.InstancesList
	17, // 13: multipass.ListReply.snapshot_list:type_name -> multipass.SnapshotsList
	8,  // 14: multipass.ListReply.update_info:type_name -> multipass.UpdateInfo
	20, // 15: multipass.NetworksReply.interfaces:type_name -> multipass.NetInterface
	8,  // 16: multipass.NetworksReply.update_info:type_name -> multipass.UpdateInfo
	34, // 17: multipass.StartError.instance_errors:type_name -> multipass.StartError.InstanceErrorsEntry
	22, // 18: multipass.StartRequest.instance_names:type_name -> multipass.InstanceNames
	8,  // 19: multipass.StartReply.update_info:type_name -> multipass.UpdateInfo
	10, // 20: multipass.DeleteRequest.instance_snapshot_pairs:type_name -> multipass.InstanceSnapshotPair
	8,  // 21: multipass.VersionReply.update_info:type_name -> multipass.UpdateInfo
	0,  // 22: multipass.LaunchRequest.NetworkOptions.mode:type_name -> multipass.LaunchRequest.NetworkOptions.Mode
	4,  // 23: multipass.StartError.InstanceErrorsEntry.value:type_name -> multipass.StartError.ErrorCode
	5,  // 24: multipass.Rpc.launch:input_type -> multipass.LaunchRequest
	13, // 25: multipass.Rpc.list:input_type -> multipass.ListRequest
	19, // 26: multipass.Rpc.networks:input_type -> multipass.NetworksRequest
	24, // 27: multipass.Rpc.start:input_type -> multipass.StartRequest
	26, // 28: multipass.Rpc.delet:input_type -> multipass.DeleteRequest
	28, // 29: multipass.Rpc.version:input_type -> multipass.VersionRequest
	30, // 30: multipass.Rpc.authenticate:input_type -> multipass.AuthenticateRequest
	9,  // 31: multipass.Rpc.launch:output_type -> multipass.LaunchReply
	18, // 32: multipass.Rpc.list:output_type -> multipass.ListReply
	21, // 33: multipass.Rpc.networks:output_type -> multipass.NetworksReply
	25, // 34: multipass.Rpc.start:output_type -> multipass.StartReply
	27, // 35: multipass.Rpc.delet:output_type -> multipass.DeleteReply
	29, // 36: multipass.Rpc.version:output_type -> multipass.VersionReply
	31, // 37: multipass.Rpc.authenticate:output_type -> multipass.AuthenticateReply
	31, // [31:38] is the sub-list for method output_type
	24, // [24:31] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_multipass_proto_init() }
func file_multipass_proto_init() {
	if File_multipass_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_multipass_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceSnapshotPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotFundamentals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVMInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVMSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchRequest_NetworkOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multipass_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchReply_Alias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_multipass_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*LaunchReply_VmInstanceName)(nil),
		(*LaunchReply_LaunchProgress)(nil),
		(*LaunchReply_CreateMessage)(nil),
	}
	file_multipass_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_multipass_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ListReply_InstanceList)(nil),
		(*ListReply_SnapshotList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_multipass_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_multipass_proto_goTypes,
		DependencyIndexes: file_multipass_proto_depIdxs,
		EnumInfos:         file_multipass_proto_enumTypes,
		MessageInfos:      file_multipass_proto_msgTypes,
	}.Build()
	File_multipass_proto = out.File
	file_multipass_proto_rawDesc = nil
	file_multipass_proto_goTypes = nil
	file_multipass_proto_depIdxs = nil
}
